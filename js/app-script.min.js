(function() {
  'use strict';

  angular
    .module('app', [
      'pascalprecht.translate',
      'ui.router',
      'ui.bootstrap'
    ]);
})();

(function() {
  'use strict';

  angular
    .module('app')
    .constant('i18nRoutes', i18nRoutes());

  i18nRoutes.$inject = [];

  function i18nRoutes() {
    var i18nStateList = [{
      name: 'lang',
      abstract: true,
      url: '/:lang',
      controller: 'LangController as langCtrl',
      template: '<ui-view/>'
    }];

    return i18nStateList;
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .factory('i18n', i18n);

  i18n.$inject = [
    '$translate'
  ];

  function i18n($translate) {
    var currentLang = getDefaultLang();

    var factory = {
      setLang: setLang,
      getLang: getLang
    };
    return factory;

    function setLang(langKey) {
      currentLang = langKey;
      $translate.use(currentLang);
    }

    function getLang() {
      return currentLang;
    }

    function getDefaultLang() {
      var defaultLang = 'en';
      return defaultLang;
    }
  }
})();

(function() {
  'use strict';

  angular
    .module('app')
    .controller('LangController', LangController);

  LangController.$inject = [
    '$stateParams',
    'i18n'
  ];

  function LangController($stateParams, i18n) {
    var vm = this;
    vm.setLang = setLang;

    setLang($stateParams.lang);

    function setLang(langKey) {
      i18n.setLang(langKey);
    }
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .factory('booksFactory', booksFactory);

  booksFactory.$inject = [
    '$http'
  ];

  function booksFactory($http) {
    var factory = {
      getAll: getAll(),
      get: get,
      getByRating: getByRating
    };

    function getAll() {
      return $http
        .get('books/array.json')
        .success(function(data) {
          factory.all = data;
          return data;
        });
    }

    return factory;

    function get(id) {
      var item = this.all.find(function(el) {
        return el.id === id;
      });

      return item;
    }

    function getByRating() {
      var list = this.all.sort(function(a, b) {
        return b.rating - a.rating;
      });

      return list;
    }
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .constant('bookTopNewRoutes', bookTopNewRoutes());

  bookTopNewRoutes.$inject = [];

  function bookTopNewRoutes() {
    var bookStateList = [{
      name: 'lang.book.topNew',
      url: '/top/new',
      templateUrl: '/views/book-top-new.html',
      controller: 'BookTopNewController as bookTopNewCtrl'
    }];

    return bookStateList;
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .controller('BookTopNewController', BookTopNewController);

  BookTopNewController.$inject = [
    'booksFactory'
  ];

  function BookTopNewController(booksFactory) {
    var vm = this;
    booksFactory.getAll.then(function() {
      vm.tenNewBooks = booksFactory.getByRating().slice(0, 10);
    });
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .constant('bookSearchRoutes', bookSearchRoutes());

  bookSearchRoutes.$inject = [];

  function bookSearchRoutes() {
    var bookStateList = [{
      name: 'lang.book.search',
      url: '/search',
      templateUrl: '/views/book-search.html',
      controller: 'BookSearchController as bookSearchCtrl'
    }];

    return bookStateList;
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .controller('BookSearchController', BookSearchController);

  BookSearchController.$inject = [
    'orderByFilter',
    'booksFactory'
  ];

  function BookSearchController(orderBy, booksFactory) {
    var vm = this;
    vm.propertyName = 'name';
    vm.reverse = false;
    vm.books = orderBy(booksFactory.all, vm.propertyName, vm.reverse);
    vm.activeItem;
    vm.page = 1;
    vm.count = 10;
    vm.displayItems = vm.books.slice(0, vm.count);
    vm.pageChanged = pageChanged;
    vm.setActiveItem = setActiveItem;
    vm.sortBy = sortBy;

    function sortBy(propertyName) {
      if (propertyName !== null && vm.propertyName === propertyName) {
        vm.reverse = !vm.reverse;
      } else {
        vm.reverse = false;
      }
      vm.propertyName = propertyName;
      vm.books = orderBy(vm.books, vm.propertyName, vm.reverse);
    }

    function setActiveItem(item) {
      if (vm.activeItem) {
        vm.activeItem.isActive = false;
      }

      vm.activeItem = item;
      vm.activeItem.isActive = true;
    }

    function pageChanged() {
      var startPos = (vm.page - 1) * vm.count;
      vm.displayItems = vm.books.slice(startPos, startPos + vm.count);
    }
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .constant('bookShowRoutes', bookShowRoutes());

  bookShowRoutes.$inject = [];

  function bookShowRoutes() {
    var bookStateList = [{
      name: 'lang.book',
      abstract: true,
      url: '/book',
      template: '<ui-view/>'
    }, {
      name: 'lang.book.show',
      url: '/show/:id',
      templateUrl: '/views/book-show.html',
      controller: 'BookShowController as bookShowCtrl'
    }];

    return bookStateList;
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .controller('BookShowController', BookShowController);

  BookShowController.$inject = [
    '$stateParams',
    'booksFactory'
  ];

  function BookShowController($stateParams, booksFactory) {
    var vm = this;
    vm.id = $stateParams.id;
    vm.book = booksFactory.get(vm.id);
  }
})();


(function() {
  'use strict';

  angular
    .module('app')
    .controller('AppController' , AppController);

  AppController.$inject = [
    'appConfig'
  ];

  function AppController(appConfig) {
    var vm = this;
    vm.name = appConfig.name;
  }
})();

(function() {
  'use strict';

  angular
    .module('app')
    .constant('appConfig', appConfig());

  appConfig.$inject = [];

  function appConfig() {
    var config = {
      name: 'Online library',
      location: 'en'
    };

    return config;
  }
})();

(function() {
  'use strict';

  angular
    .module('app')
    .config(config);

  config.$inject = [
    '$stateProvider',
    '$urlRouterProvider',
    '$translateProvider',
    'i18nRoutes',
    'bookShowRoutes',
    'bookTopNewRoutes',
    'bookSearchRoutes',
    'appConfig'
  ];

  function config($stateProvider, $urlRouterProvider, $translateProvider, i18nRoutes, bookShowRoutes, bookTopNewRoutes, bookSearchRoutes, appConfig) {
    createRouting();
    createI18n();

    function createRouting() {
      var location = appConfig.location;
      $urlRouterProvider.otherwise('/' + location + '/book/top/new');

      var routes = i18nRoutes;
      routes = routes.concat(bookShowRoutes);
      routes = routes.concat(bookTopNewRoutes);
      routes = routes.concat(bookSearchRoutes);
      for (var i = 0; i < routes.length; i++) {
        var state = routes[i];
        $stateProvider.state(state);
      }
    }

    function createI18n() {
      $translateProvider.translations('en', {
        'TOP': 'Top',
        'SEARCH': 'Search',
        'BEST_BOOKS_AND_AUTHORS': 'Best Book\'s & Author\'s',
        'BOOKS_RATING': 'Book\'s rating',
        'AUTHOR_RATING': 'Author\'s rating',
        'NAME': 'Name',
        'ID': 'Id',
        'DESCRIPTION': 'Description',
        'RATING': 'Rating',
        'AUTHOR': 'Author'
      });

      $translateProvider.translations('de', {
      });

      $translateProvider.translations('ru', {
      });

      $translateProvider.preferredLanguage('en');
    }
  }
})();
